{
  "extends": [
    "react-app", // Create React App base settings
    "eslint:recommended", // recommended ESLint rules,
    "airbnb-typescript", // Airbnb typescript rules
    "plugin:@typescript-eslint/recommended", // recommended rules from @typescript-eslint/eslint-plugin
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display Prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "rules": {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    "no-param-reassign": [
      "error",
      {
        "props": true,
        "ignorePropertyModificationsFor": ["state"]
      }
    ],
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off", // Since we do not use prop-types
    "react/require-default-props": "off", // Since we do not use prop-types
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["error"]
  },

  "parserOptions": {
    "project": "tsconfig.json"
  },
  // Disabling this to use Type Assertion
  "overrides": [
    {
      "files": ["*.tsx", "*.ts"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off"
      }
    },
    // Type-only circular references are fine. The TS compiler will resolve those at compile time. In particular, it's normal to have a slice file export its reducer, import the reducer into the store setup, define the RootState type based on that slice, and then re-import the RootState type back into a slice file.
    // Circular imports are only a potential issue when runtime behavior is involved, such as two slices depending on each other's actions.
    // Unfortunately, the ESLint rule for catching circular dependencies can't tell that what's being imported is just a type, as far as I know.
    // https://stackoverflow.com/questions/63923025/how-to-fix-circular-dependencies-of-slices-with-the-rootstate
    {
      "files": ["src/app/store.ts", "src/features/**/counter*.ts"],
      "rules": {
        "import/no-cycle": "off"
      }
    }
  ],
  // No need to lint this autogenerated file
  "ignorePatterns": ["src/serviceWorker.ts", "craco.config.js"]
}
